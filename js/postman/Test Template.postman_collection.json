{
	"info": {
		"_postman_id": "32305546-55f8-4c5c-9af0-0d8407d5d720",
		"name": "Test Template",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32712165"
	},
	"item": [
		{
			"name": "(簡單) 測試遊戲幣餘額",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 注入通用方法\r",
							"eval(pm.collectionVariables.get(\"inject_run\"))\r",
							"\r",
							"// 範例請參考根的 Pre-request Script\r",
							"safeCall(run)\r",
							"\r",
							"// 主運行函數\r",
							"async function run() {\r",
							"    // 將 postman send 的 api 響應取出來(用此取代 pm.response)\r",
							"    test(responseBody())\r",
							"}\r",
							"\r",
							"// 測試相關函數\r",
							"function test(data) {\r",
							"    pm.test('遊戲幣是否相符', () => {\r",
							"        pm.expect(data.balance).to.equal(251.23)\r",
							"    })\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{fundApi}}/playerAvailableBalance",
					"host": [
						"{{fundApi}}"
					],
					"path": [
						"playerAvailableBalance"
					]
				}
			},
			"response": []
		},
		{
			"name": "(簡單) 復用查詢參數範例",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 注入通用方法\r",
							"eval(pm.collectionVariables.get(\"inject_run\"))\r",
							"const baseMethod = pm.request.method\r",
							"const baseRequestUrl = `[${pm.request.method}:_] ${pm.request.url.toString()}`\r",
							"const baseBody = { mode: pm.request.body.mode, raw: pm.request.body.raw }\r",
							"\r",
							"// 範例請參考根的 Pre-request Script\r",
							"safeCall(run)\r",
							"\r",
							"// 主運行函數\r",
							"async function run() {\r",
							"    // 將 postman send 的 api 響應取出來(用此取代 pm.response)\r",
							"    test(responseBody())\r",
							"    test(await request(baseRequestUrl, { body: baseBody }))\r",
							"}\r",
							"\r",
							"// 測試相關函數\r",
							"function test(data) {\r",
							"    pm.test('是否只有一頁數據', () => {\r",
							"        pm.expect(data.paging.lastPageNumber).to.equal(1)\r",
							"    })\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"apiTypeId\": \"6d392657-e49a-4bf9-ba4c-e1816264a45c\",\r\n  \"gameTypeId\": \"\",\r\n  \"apiId\": \"\",\r\n  \"pageNumber\": 1,\r\n  \"pageSize\": 20\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{gameApi}}/navigation/getGameList",
					"host": [
						"{{gameApi}}"
					],
					"path": [
						"navigation",
						"getGameList"
					]
				}
			},
			"response": []
		},
		{
			"name": "(複雜一點) 測試多次遊戲幣餘額",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 注入通用方法\r",
							"eval(pm.collectionVariables.get(\"inject_run\"))\r",
							"// 你們在寫時通常不會有這兩值，為測試用而已\r",
							"const balances = [251.23, 100, 200, 251.23]\r",
							"let repeatCount = 0\r",
							"\r",
							"// 範例請參考根的 Pre-request Script\r",
							"repeat(run, 1, 3, false)\r",
							"\r",
							"// 主運行函數\r",
							"async function run(isFirstCall) {\r",
							"    // 將 postman send 的 api 響應取出來(用此取代 pm.response)\r",
							"    if (isFirstCall) return test(responseBody())\r",
							"    test(await request('[get:fundApi] playerAvailableBalance'))\r",
							"}\r",
							"\r",
							"// 測試相關函數\r",
							"function test(data) {\r",
							"    pm.test('遊戲幣是否相符', () => {\r",
							"        pm.expect(data.balance).to.equal(balances[repeatCount++])\r",
							"    })\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{fundApi}}/playerAvailableBalance",
					"host": [
						"{{fundApi}}"
					],
					"path": [
						"playerAvailableBalance"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					";(async () => {",
					"    if (!!pm.collectionVariables.get('playerSid')) {",
					"        pm.request.headers.add({key: 'SID', value: pm.collectionVariables.get(\"playerSid\") });",
					"        passTest('取得全局緩存 collection 成功')",
					"        return",
					"    }",
					"",
					"    const run = provider('run', injectRun)",
					"",
					"    /*",
					"        寫入全局 variables，可以使用 pm.collectionVariables.get(\"variable_key\") 來獲取",
					"        除了以下設置外的特殊 key 有：",
					"        playerSid 玩家端登入成功後的 SID",
					"    */",
					"    envVariables([",
					"        /*",
					"            envDev  開發環境",
					"            envTest 測試環境",
					"        */",
					"        envTest,",
					"    ][0].bind({",
					"        apiPaths: [",
					"            // 以下有需要自己加 [apiVariable(可以是 -> 自動轉駝峰，或是自定義都可), apiPathname]",
					"            // 此 apiVariable 為自定義",
					"            // ['activityApi', 'activity-api'],",
					"            // 此 apiVariable 為使用右邊值產生成駝峰變數",
					"            // ['->', 'player-api'],",
					"",
					"            // 玩家 api，可找 rex",
					"            ['->', 'player-api'],",
					"",
					"            // 遊戲 api，可找 nelson",
					"            ['->', 'game-api'],",
					"",
					"            // 錢 api，可找 shen or eg",
					"            ['->', 'fund-api'],",
					"",
					"            ['->', 'merchant-api'],",
					"",
					"            // 活動 api，可找 brian(活動), welson(大獎), hanson(老大)",
					"            ['->', 'activity-api'],",
					"",
					"            ['->', 'cms-api'],",
					"        ]",
					"    }))",
					"    ",
					"    preTest()",
					"",
					"    /**",
					"     * @description 預測試",
					"     */",
					"    async function preTest() {",
					"        try {",
					"            await passSid()",
					"            passTest('全局 Pre-request Script 通過')",
					"        } catch (error) {",
					"            console.error('[collection preTest] 出現錯誤，下行為錯誤內容：')",
					"            console.error(error)",
					"            failTest('失敗')",
					"        }",
					"    }",
					"",
					"    /**",
					"     * @description 登入並將 SID 寫入到 global 與 headers",
					"     */",
					"    async function passSid() {",
					"        // // 自定義絕對路徑請求範例",
					"        // const absoultePathExampleResponse = await run.request('[get:_] https://www.google.com')",
					"        const loginResponse = await run.request('[post:playerApi] passport/login.html', {",
					"            header: {",
					"                'Content-Type': 'application/x-www-form-urlencoded',",
					"            },",
					"            body: {",
					"                mode: 'urlencoded',",
					"                urlencoded: [",
					"                    { key: \"username\", value: pm.collectionVariables.get('username') },",
					"                    { key: \"password\", value: pm.collectionVariables.get('password') }",
					"                ],",
					"            }",
					"        }, 'default')",
					"        ",
					"        if (loginResponse.json().code !== '200') customErrorTest('打到他家發現家燒了')",
					"",
					"        const sid = loginResponse.headers.get('SID')",
					"        pm.collectionVariables.set(\"playerSid\", sid)",
					"        pm.request.headers.add({key: 'SID', value: sid });",
					"        passTest('登入成功')",
					"    }",
					"",
					"    /**",
					"     * @description inject 開頭表示可以注入到個別 request test 裡",
					"     */",
					"    /*  調用範例",
					"        -",
					"        1. 僅調用一次測試",
					"        safeCall(run)",
					"",
					"        2. 馬上測試且 1 秒後會在測試一次，當測滿 5 次結束測試",
					"        repeat(run, 1, 5, false)",
					"",
					"        3. 馬上測試且 1 秒後會在測試一次",
					"        repeat(run, 1)",
					"    */",
					"    function injectRun() {",
					"        /**",
					"         * @description 重複執行",
					"         */",
					"        async function repeat(fn, second = 15, maxCount = 5, succeedClose = true) {",
					"            if (typeof fn !== 'function') customErrorTest('request 出現了 err')",
					"",
					"            if (await safeCall(() => run(true)) === 'bad') return",
					"",
					"            let time = second * 1000",
					"            let count = 0",
					"            ",
					"            timeoutCall()",
					"",
					"            function timeoutCall() {",
					"                setTimeout(async () => {",
					"                    let isLast = succeedClose || ++count >= maxCount",
					"",
					"                    if (isLast) {",
					"                        console.log(`最後 1${succeedClose ? '' : `(${count})`} 次重試`)",
					"                    } else {",
					"                        console.log(`第 ${count} 次重試`)",
					"                    }",
					"",
					"                    if (await safeCall(run) === 'bad') return",
					"                    if (!isLast) timeoutCall()",
					"                }, time)",
					"            }",
					"        }",
					"",
					"        async function safeCall(fn) {",
					"            try {",
					"                await fn()",
					"            } catch (error) {",
					"                try {",
					"                    customErrorTest('run 方法出現異常', error)",
					"                } catch {",
					"                    return 'bad'",
					"                }",
					"            }",
					"        }",
					"",
					"        function request(apiUrl, request = {}, responseType = 'json') {",
					"            return new Promise((resolve, reject) => {",
					"                // e.g. [get:activityApi] activity/sportReWaterActivityId",
					"                let url = apiUrl, method, apiName, apiPath, symStart = -1, symEnd = -1",
					"",
					"                for (let i = 0; i < apiUrl.length; i++) {",
					"                    const e = apiUrl[i]",
					"",
					"                    if (e === '[') {",
					"                        symStart = i",
					"                        continue",
					"                    }",
					"                    ",
					"                    if (e === ']') {",
					"                        symEnd = i",
					"                    }",
					"",
					"                    if (symStart > -1 && symEnd > -1) {",
					"                        let bpIdx = -1",
					"",
					"                        for (let j = symStart; j < symEnd; j++) {",
					"                            const f = apiUrl[j]",
					"                            if (f === ':') {",
					"                                bpIdx = j",
					"                                break",
					"                            }",
					"                        }",
					"",
					"                        if (bpIdx > -1) {",
					"                            method = apiUrl.substring(1, bpIdx).toUpperCase()",
					"                            apiName = apiUrl.substring(bpIdx + 1, symEnd)",
					"                            apiPath = apiUrl.substring(symEnd + 1).trimStart()",
					"                        }",
					"                        break",
					"                    }",
					"                }",
					"",
					"                if (!!apiPath && apiName !== '_') {",
					"                    let _apiPath = apiPath",
					"                    if (_apiPath[0] === '/') _apiPath = _apiPath.substring(1)",
					"                    url = `${pm.collectionVariables.get(apiName)}/${_apiPath}`",
					"                } else {",
					"                    url = apiPath",
					"                }",
					"",
					"                pm.sendRequest(",
					"                    {",
					"                        ...request,",
					"                        method,",
					"                        url,",
					"                        header: {",
					"                            'Content-Type': 'application/json',",
					"                            'SID': pm.collectionVariables.get('playerSid'),",
					"                            ...(request?.header || {})",
					"                        },",
					"                    }, ",
					"                    (error, response) => {",
					"                        try {",
					"                            // console.log(`request url 為 [${method}] ${url}`)",
					"                            if (error) customErrorTest('request 出現了 err', error)",
					"                            ",
					"                            const responseResult = responseBody(response, responseType)",
					"                            resolve(responseResult)",
					"                        } catch (error) {",
					"                            reject(error)",
					"                        }",
					"                    })",
					"            })",
					"        }",
					"",
					"        function customErrorTest(errorMessage, error) {",
					"            pm.test('自定義錯誤', () => pm.expect(false, `${errorMessage}`).to.be.true)",
					"            ",
					"            if (error != null) {",
					"                console.error(`[自定義錯誤] ${errorMessage}${error == null ? '' : '，下行為 error 錯誤訊息：'}`)",
					"                console.error(error)",
					"                throw new Error(error)",
					"            } else {",
					"                console.error(`[自定義錯誤] ${errorMessage}`)",
					"                throw new Error(errorMessage)",
					"            }",
					"        }",
					"",
					"        function baseUrl(name, suffix = '') {",
					"            const { protocol, hostname } = this?.env || {",
					"                protocol: pm.collectionVariables.get(\"protocol\"),",
					"                hostname: pm.collectionVariables.get(\"hostname\"),",
					"            }",
					"            suffix = suffix[0] === '/' ? suffix.substring(1) : suffix",
					"            if (!name) return `${protocol}://${hostname}/${suffix}`",
					"            return `${protocol}://${hostname}/${name}/${suffix}`",
					"        }",
					"",
					"        function responseBody(response = pm.response, responseType = 'json') {",
					"            if (response.code !== 200) {",
					"                // console.log('response 響應：', response)",
					"",
					"                if (response.code === 403) customErrorTest('403 權限異常')",
					"                customErrorTest('api 未通，可能是更新造成，或其他異常')",
					"            }",
					"",
					"            const isDefaultResponse = responseType === 'default'",
					"            ",
					"            if (isDefaultResponse) return response",
					"",
					"            const responseResult = response[responseType]();",
					"",
					"            // console.log(`responseResult 為`, responseResult)",
					"",
					"            if (responseResult.code !== '200') customErrorTest('打到他家發現家燒了')",
					"",
					"            return responseResult.data",
					"        }",
					"",
					"        return {",
					"            repeat,",
					"            safeCall,",
					"            request,",
					"            customErrorTest,",
					"            baseUrl,",
					"            responseBody,",
					"        }",
					"    }",
					"    ",
					"    function passTest(message) {",
					"        pm.test(message, () => pm.expect(true).to.be.true)",
					"    }",
					"    ",
					"    function failTest(message) {",
					"            pm.test('全局 Pre-request Script 失敗', () => pm.expect(false, `${message}`).to.be.true)",
					"    }",
					"",
					"    function provider(name, func) {",
					"        const variables = func()",
					"        ",
					"        if (variables == null) {",
					"            pm.collectionVariables.set(`inject_${name}`, 'null')",
					"            return null",
					"        }",
					"",
					"        let funcString = ''",
					"        for (const k in variables) {",
					"            funcString += `${variables[k]?.toString ? variables[k].toString() : variables[k]}\\n`",
					"        }",
					"",
					"        pm.collectionVariables.set(`inject_${name}`, funcString)",
					"        return variables",
					"    }",
					"",
					"    function getApiPaths(nameList = []) {",
					"        return nameList.reduce((p, [apiName, apiPath]) => {",
					"            // // 原本邏輯：將 apiPath 自動轉成駝峰，現在改成自定義",
					"            const _apiName = apiName === '->' ",
					"                ? apiPath.replace(/[-_]([^-_]*)/g, (_, name) => {",
					"                    if (name.length > 0) return name[0].toUpperCase() + name.substring(1)",
					"                    return ''",
					"                })",
					"                : apiName",
					"            p[_apiName] = run.baseUrl.call({ env: this.env }, null, apiPath)",
					"            return p",
					"        }, {})",
					"    }",
					"",
					"    function envVariables(envFn) {",
					"        const env = envFn.call(this)",
					"        for (const name in env) {",
					"            pm.collectionVariables.set(name, env[name]);",
					"        }",
					"    }",
					"",
					"    function envCommon() {",
					"        return {",
					"            // 這裡可改",
					"            protocol: 'http',",
					"            hostname: 'www.xxx.com',",
					"            username: '0981010689',",
					"            password: '147147',",
					"",
					"            // 以下別改",
					"            ...this.env,",
					"            ...getApiPaths.call(",
					"                { env: this.env }, ",
					"                this.apiPaths,",
					"            )",
					"        }",
					"    }",
					"",
					"    function envDev() {",
					"        return envCommon.call({",
					"            ...this,",
					"            env: {",
					"                // 裡面都可改",
					"                protocol: 'https',",
					"                hostname: 'www.google.com',",
					"            }",
					"        })",
					"    }",
					"",
					"    function envTest() {",
					"        return envCommon.call({",
					"            ...this,",
					"            env: {",
					"                // 裡面都可改",
					"                protocol: 'https',",
					"                hostname: 'www.google.com',",
					"            }",
					"        })",
					"    }",
					"})()"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "inject_run",
			"value": ""
		},
		{
			"key": "protocol",
			"value": ""
		},
		{
			"key": "hostname",
			"value": ""
		},
		{
			"key": "username",
			"value": ""
		},
		{
			"key": "password",
			"value": ""
		},
		{
			"key": "activityApi",
			"value": ""
		},
		{
			"key": "playerApi",
			"value": ""
		},
		{
			"key": "fundApi",
			"value": ""
		},
		{
			"key": "NewplayerSID",
			"value": ""
		},
		{
			"key": "isFirstRun",
			"value": ""
		},
		{
			"key": "gameApi",
			"value": ""
		},
		{
			"key": "merchantApi",
			"value": ""
		},
		{
			"key": "cmsApi",
			"value": ""
		},
		{
			"key": "playerSid",
			"value": ""
		}
	]
}
